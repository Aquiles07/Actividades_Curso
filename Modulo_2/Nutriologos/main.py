# -*- coding: utf-8 -*-
"""main(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ceMsliT_oCKAV5BqxVNSrX97jnV_e3V1
"""

import streamlit as st
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

def generar_datos_simulados(cantidad_datos):
    edad = st.slider("Edad", 18, 80, 30, step=1)
    peso = st.slider("Peso (kg)", 40, 150, 70, step=1)
    altura = st.slider("Altura (cm)", 100, 250, 170, step=1)
    nivel_actividad = st.selectbox("Nivel de Actividad Física", ['Sedentario', 'Ligero', 'Moderado', 'Intenso'])

    # Generar datos simulados basados en la entrada del usuario
    edad_data = np.random.randint(edad, edad+10, cantidad_datos)
    peso_data = np.random.normal(peso, 15, cantidad_datos)
    altura_data = np.random.normal(altura, 10, cantidad_datos)
    actividad_data = np.array([nivel_actividad] * cantidad_datos)

    # Crear DataFrame simulado
    data = {
        'Edad': edad_data,
        'Peso': peso_data,
        'Altura': altura_data,
        'Nivel de Actividad Física': actividad_data
    }
    df = pd.DataFrame(data)
    return df

def entrenar_modelo(df):
    X = df[['Edad', 'Peso', 'Altura']]
    y = df['Nivel de Actividad Física']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    rf_classifier = RandomForestClassifier(random_state=42)
    rf_classifier.fit(X_train, y_train)

    y_pred = rf_classifier.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    return accuracy

def main():
    st.title("Aplicación de Análisis de Datos y Entrenamiento de Modelo")

    cantidad_datos = st.slider("Cantidad de Datos Simulados", 100, 2000, 500, step=100)

    # Generar datos simulados basados en la entrada del usuario
    df = generar_datos_simulados(cantidad_datos)

    st.write("### Datos Simulados Generados:")
    st.write(df.head())

    st.write("### Entrenando Modelo de Clasificación...")
    accuracy = entrenar_modelo(df)

    st.write(f"**Precisión del Modelo:** {accuracy:.2f}")

if __name__ == "__main__":
    main()