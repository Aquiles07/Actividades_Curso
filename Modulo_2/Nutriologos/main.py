# -*- coding: utf-8 -*-
"""main(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ceMsliT_oCKAV5BqxVNSrX97jnV_e3V1
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Configurar Streamlit para desactivar la advertencia relacionada con pyplot global
st.set_option('deprecation.showPyplotGlobalUse', False)

# Definir una función para generar datos simulados
def generar_datos_simulados(cantidad_datos):
    np.random.seed(42)
    edad = np.random.randint(18, 80, cantidad_datos)
    peso = np.random.normal(70, 15, cantidad_datos)
    altura = np.random.normal(170, 10, cantidad_datos)
    enfermedad = np.random.choice([0, 1, 2, 3, 4], cantidad_datos, p=[0.9, 0.02, 0.02, 0.02, 0.04])  # Distribución de enfermedades
    data = {'Edad': edad, 'Peso': peso, 'Altura': altura, 'Enfermedad_Cronica': enfermedad}
    return pd.DataFrame(data)

# Función para entrenar el modelo y devolverlo
def entrenar_modelo(datos):
    X = datos[['Edad', 'Peso', 'Altura']]
    y = datos['Enfermedad_Cronica']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)
    return model, X_test, y_test

# Función para predecir enfermedades crónicas
def predecir_enfermedades(modelo, datos):
    X_test = datos[['Edad', 'Peso', 'Altura']]
    y_test = datos['Enfermedad_Cronica']
    y_pred = modelo.predict(X_test)
    report = classification_report(y_test, y_pred)
    return report

# Configurar la aplicación de Streamlit
def main():
    st.title("Aplicación de Predicción de Enfermedades Crónicas")

    cantidad_datos = st.slider("Cantidad de Datos Simulados", 100, 2000, 500, step=100)
    datos_simulados = generar_datos_simulados(cantidad_datos)

    st.subheader("Datos Simulados:")
    st.write(datos_simulados)

    enfermedades = ['No Tiene Enfermedad', 'Diabetes', 'Hipertensión', 'Cáncer', 'Enfermedad Cardiovascular']

    if st.button("Entrenar Modelo y Predecir"):
        st.write("Entrenando el modelo...")
        model, X_test, y_test = entrenar_modelo(datos_simulados)
        report = predecir_enfermedades(model, datos_simulados)

        st.write("Reporte de Clasificación:")
        st.write(report)

        # Mostrar gráficos de distribución de variables por enfermedad crónica
        st.subheader("Distribución de Variables por Enfermedad Crónica:")
        for variable in ['Edad', 'Peso', 'Altura']:
            plt.figure(figsize=(10, 6))
            for i in range(5):
                sns.histplot(datos_simulados[datos_simulados['Enfermedad_Cronica'] == i][variable], bins=30, alpha=0.5, kde=True, label=enfermedades[i], color=sns.color_palette("Set2")[i])
            plt.title(f"Distribución de {variable}")
            plt.xlabel(variable)
            plt.ylabel("Frecuencia")
            plt.legend()
            st.pyplot()

# Ejecutar la aplicación
if __name__ == "__main__":
    main()