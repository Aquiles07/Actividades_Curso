# -*- coding: utf-8 -*-
"""main(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ceMsliT_oCKAV5BqxVNSrX97jnV_e3V1
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Función para generar datos simulados
def generar_datos_simulados(cantidad_datos):
    edad_data = np.random.randint(18, 80, cantidad_datos)
    peso_data = np.random.normal(70, 15, cantidad_datos)
    altura_data = np.random.normal(170, 10, cantidad_datos)

    df = pd.DataFrame({
        'Edad': edad_data,
        'Peso': peso_data,
        'Altura': altura_data
    })

    # Mostrar histogramas de edad, peso y altura
    st.write("### Histograma de Edad:")
    plt.hist(df['Edad'], bins=30)
    st.pyplot()

    st.write("### Histograma de Peso:")
    plt.hist(df['Peso'], bins=30)
    st.pyplot()

    st.write("### Histograma de Altura:")
    plt.hist(df['Altura'], bins=30)
    st.pyplot()

    return df

# Función para entrenar el modelo y predecir enfermedades crónicas
def entrenar_y_predecir_enfermedad(df, enfermedad_objetivo):
    # Definir características (features) y variable objetivo
    X = df[['Edad', 'Peso', 'Altura']]
    y = df[enfermedad_objetivo]

    # Dividir datos en conjunto de entrenamiento y prueba
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Inicializar modelo de clasificación RandomForest
    rf_classifier = RandomForestClassifier(random_state=42)

    # Entrenar modelo
    rf_classifier.fit(X_train, y_train)

    # Realizar predicciones en conjunto de prueba
    y_pred = rf_classifier.predict(X_test)

    # Calcular métricas de evaluación
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    matrix = confusion_matrix(y_test, y_pred)

    # Mostrar matriz de confusión
    st.write("### Matriz de Confusión:")
    sns.heatmap(matrix, annot=True, fmt='d', cmap='Blues')
    st.pyplot()

    return accuracy, report

def main():
    st.title("Aplicación de Predicción de Enfermedades Crónicas")

    cantidad_datos = st.slider("Cantidad de Datos Simulados", 100, 2000, 500, step=100)

    # Generar datos simulados
    df = generar_datos_simulados(cantidad_datos)

    # Definir lista de nombres de enfermedades crónicas que coincidan con las columnas en df
    enfermedades = df.columns.tolist()  # Obtener nombres de columnas como lista

    # Permitir al usuario seleccionar la enfermedad crónica a predecir
    enfermedad_objetivo = st.selectbox("Seleccionar Enfermedad Crónica a Predecir", enfermedades)

    st.write(f"### Entrenando Modelo para Predecir {enfermedad_objetivo}...")
    accuracy, report = entrenar_y_predecir_enfermedad(df, enfermedad_objetivo)

    st.write(f"**Precisión del Modelo para {enfermedad_objetivo}:** {accuracy:.2f}")
    st.write("### Reporte de Clasificación:")
    st.write(report)