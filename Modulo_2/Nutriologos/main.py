# -*- coding: utf-8 -*-
"""main(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ceMsliT_oCKAV5BqxVNSrX97jnV_e3V1
"""

import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.preprocessing import OneHotEncoder

# Función para generar datos simulados
def generar_datos_simulados(cantidad_datos):
    np.random.seed(42)
    edad = np.random.randint(18, 80, cantidad_datos)
    peso = np.random.normal(70, 15, cantidad_datos)
    altura = np.random.normal(170, 10, cantidad_datos)
    historial_medico = np.random.choice(['Diabetes', 'Hipertensión', 'Cáncer', 'Enfermedades cardiovasculares', 'Otros'], cantidad_datos)
    enfermedad = np.random.choice([0, 1, 2, 3, 4], cantidad_datos, p=[0.8, 0.05, 0.05, 0.05, 0.05])  # Distribución de enfermedades
    data = {'Edad': edad, 'Peso': peso, 'Altura': altura, 'Historial_Medico': historial_medico, 'Enfermedad_Cronica': enfermedad}
    return pd.DataFrame(data)

# Función para preprocesar los datos y entrenar el modelo
def entrenar_modelo(datos):
    # Codificar variables categóricas
    encoder = OneHotEncoder(sparse=False)
    historial_medico_encoded = encoder.fit_transform(datos[['Historial_Medico']])

    # Combinar variables numéricas y codificadas
    X_numerico = datos[['Edad', 'Peso', 'Altura']]
    X = np.concatenate([X_numerico, historial_medico_encoded], axis=1)
    y = datos['Enfermedad_Cronica']

    # Dividir datos en conjunto de entrenamiento y prueba
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Entrenar el modelo RandomForestClassifier
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)

    return model, X_test, y_test

# Función para predecir enfermedades crónicas
def predecir_enfermedades(modelo, X_test, y_test):
    y_pred = modelo.predict(X_test)
    report = classification_report(y_test, y_pred)
    return report

# Configurar la aplicación de Streamlit
def main():
    st.title("Aplicación de Predicción de Enfermedades Crónicas")

    cantidad_datos = st.slider("Cantidad de Datos Simulados", 100, 2000, 500, step=100)

    if st.button("Generar Datos y Predecir"):
        st.write("Generando datos simulados...")
        datos_simulados = generar_datos_simulados(cantidad_datos)

        st.subheader("Datos Simulados:")
        st.write(datos_simulados)

        # Visualización de relaciones entre variables con Altair
        st.subheader("Relación entre Edad, Peso y Altura:")
        scatter_chart = alt.Chart(datos_simulados).mark_circle().encode(
            x='Edad',
            y='Peso',
            size='Altura',
            color='Historial_Medico',
            tooltip=['Edad', 'Peso', 'Altura', 'Historial_Medico']
        ).interactive()
        st.altair_chart(scatter_chart, use_container_width=True)

        st.write("Entrenando el modelo...")
        model, X_test, y_test = entrenar_modelo(datos_simulados)
        report = predecir_enfermedades(model, X_test, y_test)

        st.write("Reporte de Clasificación:")
        st.write(report)

# Ejecutar la aplicación
if __name__ == "__main__":
    main()